import asyncio
import contextlib
import datetime as dt
import json

from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import bot.keyboards.admin as kb
from aiogram import html

from bot.filters.check_admin import IsAdmin
from bot.services.repository import Repo
from bot.states.state import Admin

router = Router()


async def admin_message(message: types.Message):
    await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, <b>{html.quote(message.from_user.full_name)}!</b>"
                         f"\n\n–í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –±–æ—Ç–æ–º, —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å "
                         f"–ª—é–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ —É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                         f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=kb.admin_panel)


async def admin_newsletter_second_step(message: types.Message, state: FSMContext, repo: Repo):
    users = await repo.get_users()

    message_to_reply = await message.answer(
        f'<b>üì® –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞ ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</b>'
        f'\n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - '
        f'{f"{len(users) * 0.1} —Å–µ–∫—É–Ω–¥" if len(users) * 0.1 < 60 else f"{len(users) * 0.1 // 60} –º–∏–Ω—É—Ç"}')
    time_start_newsletter = dt.datetime.now()
    counter = 0
    for user in users:
        with contextlib.suppress(Exception):
            await message.send_copy(user)
            counter += 1
            await asyncio.sleep(0.1)

    time_end_newsletter = dt.datetime.now()

    total_time = round((time_end_newsletter - time_start_newsletter).total_seconds())
    await message_to_reply.reply(
        f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>\n\n'
        f'<b>‚ôªÔ∏è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {counter} —Å–æ–æ–±—â–µ–Ω–∏–π.</b>\n'
        f'<b>üîï –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(users) - counter} —Å–æ–æ–±—â–µ–Ω–∏–π.</b>\n\n'
        f'<b>‚è∞ –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: '
        f'{f"{total_time} —Å–µ–∫—É–Ω–¥" if total_time < 60 else f"{round(total_time / 60)} –º–∏–Ω—É—Ç"}. </b>')
    await state.clear()


async def admin_user_profile(message: types.Message, state: FSMContext, repo: Repo, config):
    if not message.text.isdigit():
        await message.reply('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n'
                            '–ü—Ä–∏–º–µ—Ä: <code>5630011827</code>',
                            reply_markup=kb.admin_back_to_panel)
        await state.clear()
        return

    user = await repo.get_user(int(message.text))
    if user is None:
        await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                            reply_markup=kb.admin_back_to_panel)
        await state.clear()
        return

    ban_status = "–ê–¥–º–∏–Ω" if user.user_id in json.loads(config['bot']['admin_ids']) else \
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ" if user.ban == 0 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–µ")

    await message.answer(
        f'<b>üíª –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n'
        f'<b>User ID:</b> {user.user_id}\n'
        f'<b>username:</b> {"@" + user.username if user.username is not None else "–Ω–µ—Ç"}\n\n'
        f'<b>{ban_status}</b>',
        reply_markup=kb.admin_find_user(user.user_id, user.ban, user.user_id in json.loads(config['bot']['admin_ids'])))
    await state.clear()


def register_handlers():
    router.message.register(admin_message, Command('admin'), IsAdmin())
    router.message.register(admin_newsletter_second_step, Admin.newsletter, IsAdmin())
    router.message.register(admin_user_profile, Admin.find_user, IsAdmin())
