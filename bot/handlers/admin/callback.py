from aiogram.fsm.context import FSMContext
from aiogram import types, Router
import bot.keyboards.admin as kb
from aiogram import html
from aiogram import F


from bot.filters.check_admin import IsAdmin
from bot.services.repository import Repo
from bot.states.state import Admin

router = Router()


async def admin_newsletter_first_step(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text('<b>üì® –†–∞—Å—Å—ã–ª–∫–∞</b>\n\n'
                                 '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                                 reply_markup=kb.admin_cancel_action)
    await state.set_state(Admin.newsletter)


async def admin_cancel_action(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, "
                                 f"<b>{html.quote(call.from_user.full_name)}</b>"
                                 f"\n\n–í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –±–æ—Ç–æ–º, —Å "
                                 f"–ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å "
                                 f"–ª—é–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞, –∞ —Ç–∞–∫–∂–µ —É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                                 f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                 reply_markup=kb.admin_panel)
    await state.clear()


async def admin_statistics(call: types.CallbackQuery, repo: Repo):
    users_count = await repo.get_user_count()
    await call.message.edit_text('<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n'
                                 f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}</b>',
                                 reply_markup=kb.admin_back_to_panel)


async def admin_search_user(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text('<b>üì© –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n'
                                 '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ',
                                 reply_markup=kb.admin_cancel_action)
    await state.set_state(Admin.find_user)


async def admin_ban_user(call: types.CallbackQuery, repo: Repo):
    user_id = call.data.split('admin_ban_user_')[1]
    await repo.change_ban_status(int(user_id), 1)
    await call.message.edit_text('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n',
                                 reply_markup=kb.admin_back_to_panel)


async def admin_unban_user(call: types.CallbackQuery, repo: Repo):
    user_id = call.data.split('admin_unban_user_')[1]
    await repo.change_ban_status(int(user_id), 0)
    await call.message.edit_text('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n',
                                 reply_markup=kb.admin_back_to_panel)


def register_handlers():
    router.callback_query.register(admin_newsletter_first_step, F.data == 'admin_newsletter_first', IsAdmin())
    router.callback_query.register(admin_cancel_action, F.data == 'admin_cancel_action', IsAdmin())
    router.callback_query.register(admin_statistics, F.data == 'admin_statistics', IsAdmin())
    router.callback_query.register(admin_search_user, F.data == 'admin_search_user', IsAdmin())
    router.callback_query.register(admin_ban_user, F.data.startswith("admin_ban_user_"), IsAdmin())
    router.callback_query.register(admin_unban_user, F.data.startswith("admin_unban_user_"), IsAdmin())
